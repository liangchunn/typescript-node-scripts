import chalk from 'chalk'

const friendlySyntaxErrorLabel = 'Syntax error:'

/**
 * Formats webpack messages into a nicer looking, human friendly format.
 * Heavily adopted from:
 * https://github.com/facebook/create-react-app/blob/master/packages/react-dev-utils/formatWebpackMessages.js
 *
 * TODO: fix typing of any, could be error from webpack or loader, so we might want to format it differently
 * @param message
 */
function formatMessage(rawMessage: any): string {
  const fileName = rawMessage.moduleId || rawMessage.file
  let message = fileName
    ? `${fileName}\n${rawMessage.message}`
    : `${rawMessage.message}`

  let lines = message.split('\n')

  // Remove webpack errors/warnings
  lines = lines.filter(line => !/Module [A-z ]+\(from/.test(line))

  // remove extra file path if exists
  // webpack somehow inserts a relative path into the messages, so we
  // splice it off here.
  if (lines.length > 2 && ~lines[0].indexOf(lines[1].slice(2))) {
    lines.splice(1, 1)
  }

  // remove webpack @ stack
  lines = lines.filter(line => line.indexOf(' @ ') !== 0)

  // Transform 'Parsing error' to 'Syntax error'
  lines = lines.map(line => {
    const parseError = /Line (\d+):(?:(\d+):)?\s*Parsing error: (.+)$/.exec(
      line
    )
    if (!parseError) {
      return line
    }
    const [, errorLine, errorColumn, errorMessage] = parseError
    return `${friendlySyntaxErrorLabel} ${errorMessage} (${errorLine}:${errorColumn})`
  })

  // Strip leading newlines
  if (lines.length > 2 && lines[1].trim() === '') {
    lines.splice(1, 1)
  }

  // Cleans up verbose "module not found" messages for files and packages.
  if (lines[1] && lines[1].indexOf('Module not found: ') === 0) {
    lines = [
      lines[0],
      lines[1]
        .replace('Error: ', '')
        .replace('Module not found: Cannot find file:', 'Cannot find file:'),
    ]
  }

  // Underline and bold file name
  if (lines[0]) {
    lines[0] = chalk.underline.bold(lines[0])
  }

  message = lines.join('\n')

  // Internal stacks are generally useless so we strip them... with the
  // exception of stacks containing `webpack:` because they're normally
  // from user code generated by Webpack. For more information see
  // https://github.com/facebook/create-react-app/pull/1050
  message = message.replace(
    /^\s*at\s((?!webpack:).)*:\d+:\d+[\s)]*(\n|$)/gm,
    ''
  ) // at ... ...:x:y
  message = message.replace(/^\s*at\s<anonymous>(\n|$)/gm, '') // at <anonymous>
  lines = message.split('\n')

  // Remove duplicated newlines
  lines = lines.filter(
    (line, index, arr) =>
      index === 0 || line.trim() !== '' || line.trim() !== arr[index - 1].trim()
  )

  // Reassemble the message
  message = lines.join('\n')
  return message.trim()
}

export function formatWebpackMessages(
  json: {
    errors: string[]
    warnings: string[]
  } // Webpack's stat output is typed as any
): {
  errors: string[]
  warnings: string[]
} {
  const errors = json.errors
    .map((message: string) => formatMessage(message))
    .filter(message => message !== '')
  const warnings = json.warnings
    .map((message: string) => formatMessage(message))
    .filter(message => message !== '')

  return {
    errors,
    warnings,
  }
}
